const assert = require('assert');
const crypto = require('crypto');
const TLS = require('../index.js').TLS;

describe('ChangeCipherSpec', function() {
  const ccs_buf = new Buffer('140303000101', 'hex');
  const ccs_obj = { ContentType: new Buffer('14', 'hex'),
                    ProtocolVersion: new Buffer('0303', 'hex'),
                    Length: new Buffer('0001', 'hex'),
                    ChangeCipherSpecMessage: new Buffer('01', 'hex')};
  const ccs = new TLS.ChangeCipherSpec();
  it('decode', function() {
    var rand = crypto.randomBytes(32);
    const obj = ccs.decode(Buffer.concat([ccs_buf, rand]));
    assert(obj.ContentType.equals(ccs_obj.ContentType));
    assert(obj.ProtocolVersion.equals(ccs_obj.ProtocolVersion));
    assert(obj.Length.equals(ccs_obj.Length));
    assert(obj.ChangeCipherSpecMessage.equals(ccs_obj.ChangeCipherSpecMessage));
    assert(obj.remaining_buffer.equals(rand));
  });

  it('encode', function() {
    assert(ccs_buf.equals(ccs.encode()));
  });
});

describe('Handshake', function() {
  describe('HelloRequest', function() {

    const hello_request_buf = new Buffer('160303000400000000', 'hex');
    const hello_request_obj = { ContentType: new Buffer('16', 'hex'),
                                ProtocolVersion: new Buffer('0303', 'hex'),
                                Length: new Buffer('0004', 'hex'),
                                Handshake: {
                                  HandshakeType: new Buffer('00', 'hex'),
                                  Length: new Buffer('000000', 'hex')
                                }
                               };
    const hello_request = new TLS.Handshake.HelloRequest();
    it('decode', function() {
      var rand = crypto.randomBytes(32);
      const obj = hello_request.decode(Buffer.concat([hello_request_buf, rand]));
      assert(obj.ContentType.equals(hello_request_obj.ContentType));
      assert(obj.ProtocolVersion.equals(hello_request_obj.ProtocolVersion));
      assert(obj.Length.equals(hello_request_obj.Length));
      assert(obj.Handshake.HandshakeType.equals(hello_request_obj.Handshake.HandshakeType));
      assert(obj.Handshake.Length.equals(hello_request_obj.Handshake.Length));
      assert(obj.remaining_buffer.equals(rand));
    });

    it('encode', function() {
      assert(hello_request_buf.equals(hello_request.encode()));
    });
  });
  describe('ClientHello', function() {
    var client_hello_buf = new Buffer('16030100b4010000b00303ce3af838e1191c739aacd7b6193aaa29171494d639708a36ddd1fbbc4b6b9df8000028c02bc02cc02fc030009e009fc009c00ac013c01400330039c007c011009c009d002f0035000500ff0100005f0000001800160000136176672d6872642e61707073706f742e636f6d0017000000230000000d0016001406010603050105030401040303010303020102030010000b000908687474702f312e31000b00020100000a00080006001700180019', 'hex');
    const client_hello = new TLS.Handshake.ClientHello();
    it('decode', function() {
      var rand = crypto.randomBytes(32);
      const obj = client_hello.decode(Buffer.concat([client_hello_buf, rand]));
      console.log(obj);
      console.log(obj.Handshake.Extensions);
    });

    it('encode', function() {
    });
  });
  describe('ServerHello', function() {
    var server_hello_buf = new Buffer('16030300520200004e030357917d0e9855a23682df683582c05086b1040cf4e3c7f1893948b2492d0c05cb00c02f000026ff010001000000000000170000002300000010000b000908687474702f312e31000b00020100', 'hex');
    it('encode', function() {
    });
    it('decode', function() {
    });
  });
  describe('Certificate', function() {
    var certificate_buf = new Buffer('1603030c890b000c85000c8200050430820500308203e8a00302010202082004bf48a4acbaf1300d06092a864886f70d01010b05003049310b300906035504061302555331133011060355040a130a476f6f676c6520496e63312530230603550403131c476f6f676c6520496e7465726e657420417574686f72697479204732301e170d3136303731333133323032355a170d3136313030353133313630305a3067310b30090603550406130255533113301106035504080c0a43616c69666f726e69613116301406035504070c0d4d6f756e7461696e205669657731133011060355040a0c0a476f6f676c6520496e633116301406035504030c0d2a2e61707073706f742e636f6d30820122300d06092a864886f70d01010105000382010f003082010a0282010100af44f0b444b41941958bbc0babdc3e30f98b929e59e914888e91018eef5f06ca28ce2b97b5d77ded9d8257c761bc3bc8c462a2e6c7a5cb2f0a90356272484823c3a20de0180e05586de3929a3c3b54a6391e251e1a8f159ff25404bc5003f7261506f0fa0c584a262dc0b19e6082194127effa3cf72e3c9efd78f87a5f3b2ea22f7644005ca8d691cf0e9ffeef2f807f9f697074c50bf63a00b1a816f03e25f3bbd9a40aecc1c339590ba53f978882bf443dc933d8c3f8f8ea5ccf25fc5583a5d3d593e88dfe2236ab53f2b782bdfd9850d426066e73aa7c0afb830ec41ffff66d0d472d52552760ac498a50b004f4a4c7fd768f02cfcda7e06c735f4e4fef650203010001a38201cc308201c8301d0603551d250416301406082b0601050507030106082b060105050703023081990603551d1104819130818e820d2a2e61707073706f742e636f6d82152a2e7468696e6b77697468676f6f676c652e636f6d82102a2e77697468676f6f676c652e636f6d82112a2e77697468796f75747562652e636f6d820b61707073706f742e636f6d82137468696e6b77697468676f6f676c652e636f6d820e77697468676f6f676c652e636f6d820f77697468796f75747562652e636f6d306806082b06010505070101045c305a302b06082b06010505073002861f687474703a2f2f706b692e676f6f676c652e636f6d2f47494147322e637274302b06082b06010505073001861f687474703a2f2f636c69656e7473312e676f6f676c652e636f6d2f6f637370301d0603551d0e041604148a2bb32ce12fe302375d04e719b101f89d73b97a300c0603551d130101ff04023000301f0603551d230418301680144add06161bbcf668b576f581b6bb621aba5a812f30210603551d20041a3018300c060a2b06010401d6790205013008060667810c01020230300603551d1f042930273025a023a021861f687474703a2f2f706b692e676f6f676c652e636f6d2f47494147322e63726c300d06092a864886f70d01010b05000382010100529ac220a3f2e8df8f993a162cf12631841155a40f129187bd07f7d21567bef058c9297c538a948471375870a896f7a4aabd8de38110ebce4c0370c0a8e598898e14cc695815bb63888b07fc17afd1814671fc0f0e34703be5c9a5774fa62754099617f4ef46ccf424942f7bbdb372d4a3241e9502b54028a294e325bdb402f1d1e87320e84710cba45cca0759b814041b980f4b7999e3d28a9712e0c29f7a2d0d2b9629b4221d7579745434785f34e263ee10513c25e664c72e9aa3686cd5330a331e465109d2470399da0bbe37a1d147a809a03825300aa66a95acf5e585ba618b83ab202d4a42214755f83a2f5e86feb80ee83510e193dc14d29fa3f4e6d70003f4308203f0308202d8a0030201020203023a92300d06092a864886f70d01010b05003042310b300906035504061302555331163014060355040a130d47656f547275737420496e632e311b30190603550403131247656f547275737420476c6f62616c204341301e170d3135303430313030303030305a170d3137313233313233353935395a3049310b300906035504061302555331133011060355040a130a476f6f676c6520496e63312530230603550403131c476f6f676c6520496e7465726e657420417574686f7269747920473230820122300d06092a864886f70d01010105000382010f003082010a02820101009c2a04775cd850913a06a382e0d85048bc893ff119701a88467ee08fc5f189ce21ee5afe610db7324489a0740b534f55a4ce826295eeeb595fc6e1058012c45e943fbc5b4838f453f724e6fb91e915c4cff4530df44afc9f54de7dbea06b6f87c0d0501f28300340da0873516c7fff3a3ca737068ebd4b1104eb7d24dee6f9fc3171fb94d560f32e4aaf42d2cbeac46a1ab2cc53dd154b8b1fc819611fcd9da83e632b8435696584c819c54622f85395bee3804a10c62aecba972011c739991004a0f0617a95258c4e5275e2b6ed08ca14fcce226ab34ecf46039797037ec0b1de7baf4533cfba3e71b7def42525c20d35899d9dfb0e1179891e37c5af8e72690203010001a381e73081e4301f0603551d23041830168014c07a98688d89fbab05640c117daa7d65b8cacc4e301d0603551d0e041604144add06161bbcf668b576f581b6bb621aba5a812f300e0603551d0f0101ff040403020106302e06082b0601050507010104223020301e06082b060105050730018612687474703a2f2f672e73796d63642e636f6d30120603551d130101ff040830060101ff02010030350603551d1f042e302c302aa028a0268624687474703a2f2f672e73796d63622e636f6d2f63726c732f6774676c6f62616c2e63726c30170603551d200410300e300c060a2b06010401d679020501300d06092a864886f70d01010b05000382010100084e04a7807f1016435e02add74280f4b08ed2aeb3eb117d9084187de79015fb497fa8990591bb7ac9d63c3718099ab6c7922007353309e42863720db4e0329c8798c41b768967c15058b013aa131a1b32a5beea11954c486349e9995d2037ccfe2a695116954ba9de4982c01070f42cf3ecbc2424d04eaca5d95e1e6d92c1a7ac483581f9e5e49c6569cd87a441503f2e57a5915112580e8c09a1ac7aa412a527f39a10977d550306f766585f5f64e1ab5d6da5394875984c295a3a8dd32bca9c5504bff4e614d580ac26ed1789a6936c5ca4ccb8f0668e64e37d9ae200b349c7e40aaadd5b83c77090464ebed0db59966c2ef51636de71cc01c212c121c6160003813082037d308202e6a003020102020312bbe6300d06092a864886f70d0101050500304e310b30090603550406130255533110300e060355040a130745717569666178312d302b060355040b1324457175696661782053656375726520436572746966696361746520417574686f72697479301e170d3032303532313034303030305a170d3138303832313034303030305a3042310b300906035504061302555331163014060355040a130d47656f547275737420496e632e311b30190603550403131247656f547275737420476c6f62616c20434130820122300d06092a864886f70d01010105000382010f003082010a0282010100dacc186330fdf417231a567e5bdf3c6c38e471b77891d4bca1d84cf8a843b603e94d21070888da582f663929bd05788b9d38e805b76a7e71a4e6c460a6b0ef80e489280f9e25d6ed83f3ada691c798c9421835149dad9846922e4fcaf18743c11695572d50ef892d807a57adf2ee5f6bd2008db914f8141535d9c046a37b72c891bfc9552bcdd0973e9c2664ccdfce831971ca4ee6d4d57ba919cd55dec8ecd25e3853e55c4f8c2dfe502336fc66e6cb8ea4391900b7950239910b0efe382ed11d059af64d3e6f0f071daf2c1e8f6039e2fa36531339d45e262bdb3da814bd32eb180328520471e5ab333de138bb073684629c79ea1630f45fc02be8716be4f90203010001a381f03081ed301f0603551d2304183016801448e668f92bd2b295d747d82320104f3398909fd4301d0603551d0e04160414c07a98688d89fbab05640c117daa7d65b8cacc4e300f0603551d130101ff040530030101ff300e0603551d0f0101ff040403020106303a0603551d1f04333031302fa02da02b8629687474703a2f2f63726c2e67656f74727573742e636f6d2f63726c732f73656375726563612e63726c304e0603551d200447304530430604551d2000303b303906082b06010505070201162d68747470733a2f2f7777772e67656f74727573742e636f6d2f7265736f75726365732f7265706f7369746f7279300d06092a864886f70d01010505000381810076e1126e4e4b1612863006b28108cff008c7c7717e66eec2edd43b1ffff0f0c84ed64338b0b9307d18d05583a26acb36119ce84866a36d7fb813d447fe8b5a5c73fcaed91b321938ab973414aa96d2eba31c140849b6bbe591ef8336eb1d566fcadabc736390e47f7b3e22cb3d07ed5f38749ce303504ea1af98ee61f2843f12', 'hex');
    it('encode', function() {
    });
    it('decode', function() {
    });
  });
  describe('ServerKeyExchange', function() {
    var server_key_exchange_buf = new Buffer('160303014d0c0001490300174104b75d94c3682200dc2ca78bdf04a061b5e2a7f1be9af3390f45f32cb6c8ec7b25b977dae5c84b12781adf0fac6c1eff0dd31ab5cf5ebcfd166ef5f221d9721d020401010007def775eaf4309ee823a74230e9e6b7f315524e4374e43451d49af2da57d02994d5bc67064963085d1ac4871e713fad503f58b467a803398c5298d78d313b41dcd3dc799390efa10f8a9628ca7f2d8366f6299b084688689b305bf0e576ba65f7d1d6f34a265da5922514bd73137eae6e3a2bb23468a411d770237034cd96c58e1378ae120073bb206e5ddf54a28ade1245eb59ad5c27c33202da3bb6c3c4e8250812fc9ce7bda269112b62cf09798a039323b67185948735dc39f7eb884dd7e9c4793e2de7c2d9bba29e453f00099c8d8c875d391e70ad10c2d99213f14c6f126f4ca30cc487d9bb5c7981ad97f10227b30a5d5a4c3b0d95347335bf47a199', 'hex');
    it('encode', function() {
    });
    it('decode', function() {
    });
  });
  describe('ServerHelloDone', function() {
    var server_hello_done_buf = new Buffer('16030300040e000000', 'hex');
    it('encode', function() {
    });
    it('decode', function() {
    });
  });
  describe('ClientKeyExchange', function() {
    var client_key_exchange_buf = new Buffer('16030300461000004241046683c6c21dfdc1b97f94baaeee5d562f9a864feef61e74cc44a47c0b9f1e6afd4a88784c28dc41703dd2227220a2913e7137bf8a28e117d3f45c48d7405d129a', 'hex');
    it('encode', function() {
    });
    it('decode', function() {
    });
  });
});
